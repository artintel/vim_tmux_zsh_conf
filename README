# tmux 安装
`apt install tmux`

## 更新 tmux 配置
将本仓库下的 tmux.conf 和 tmux.conf.local 拷贝到 ~/.tmux.conf 和 ~/.tmux.conf.local

# vim 安装
`apt install vim`
## 安装 ctags, 为 tagbar 插件做准备
创建必要的文件
```shell
git clone https://github.com/universal-ctags/ctags.git
apt install autoconf pkg-config
cd ctags
./autogen.sh
./configure --prefix=/usr/local/ctags
make -j && make install
echo export PATH=$HOME/tools/ctags/bin:$PATH >> /etc/profile
# 为后续用zshrc做准备
```
### ctags 的用法
`ctags -R .`

## 安装 leadef rg 所需依赖
`apt install ripgrep`

```shell
apt install vim
mkdir -p ~/.vim/autoload ~/.vim/backup ~/.vim/colors ~/.vim/plugged
```
## 安装 vim-plug 插件管理器
```shell
curl -fLo ~/.vim/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
# cd ~/.vim/plugged
# git clone https://github.com/preservim/nerdtree.git
cd ~/.vim/colors
curl -o molokai.vim https://raw.githubusercontent.com/tomasr/molokai/master/colors/molokai.vim
```
### 可能会遇到光网络问题
在 `/etc/hosts` 添加如下内容
```
199.232.68.133 raw.githubusercontent.com
199.232.68.133 user-images.githubusercontent.com
199.232.68.133 avatars2.githubusercontent.com
199.232.68.133 avatars1.githubusercontent.com
```

## 安装 YouCompleteMe 的依赖
`YouCompleteMe` 需要编译，因此你需要确保你的系统上安装了 `CMake` 和 `Python`。对于某些语言的支持，你可能还需要安装额外的依赖项，如 `Go、Node.js、Java` 等。
- `python`需要看你系统得版本，注意替换`xx`
- 如果`go`之类是源码编译，需要注意系统路径

`apt install python3.xx-dev build-essential golang-go npm`

## vimrc
将本仓库路径下的 `vimrc` 覆盖到 `~/.vimrc`
### 安装插件
```shell
vim ~/.vimrc
:source ~/.vimrc
:PlugInstall
```
## 安装 ycm 的剩余内容
完成插件的安装后，需要编译`YCM`才能使用，这涉及到编译YCM的核心以及它的语言补全引擎。
在你的`vim`插件目录中找到`YouCompleteMe`文件夹 `(~/.vim/plugged/YouCompleteMe)`, 然后运行`install.py`脚本
```shell
# https://blog.csdn.net/liao20081228/article/details/80347889
# https://clangd.llvm.org/installation.html#project-setup

python3 ./install.py --force-sudo --all
# 如果你是 root 用户，需要加上 --forece-sudo
# --all 会安装所有云烟的补全引擎，你也可以根据自己需求，选择性地安装特定语言地支持，比如
# python3 ./install.py --force-sudo --clangd-completer
```
### 自动生成 .ycm_extra_conf.py
`~/.vim/plugged/YCM-Generator/./config_gen.py <project_path>`
这是利用项目路径下的`Makefile`进行处理的
如果遇到 `python` 问题，可能是 `python3` ，可以用本仓库路径下的 `config_gen.py` 覆盖到对应路径下

# oh-my-zsh
```shell
apt install zsh
which zsh --> /usr/bin/zsh
chsh -s $(which zsh)
apt install curl
sh -c "$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"
```
## PowerLevel10k
检查一下 `${ZSH_CUSTOM}` 环境变量，检查是否需要先 `source ~/.zshrc`，默认的即可
https://github.com/romkatv/powerlevel10k

`git clone --depth=1 https://github.com/romkatv/powerlevel10k.git "${ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom}/themes/powerlevel10k"`
### China
`git clone --depth=1 https://gitee.com/romkatv/powerlevel10k.git "${ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom}/themes/powerlevel10k"`
### homebrew
```shell
brew install powerlevel10k
echo "source $(brew --prefix)/share/powerlevel10k/powerlevel10k.zsh-theme" >>~/.zshrc
```
## 自动补全 && incr 提示
```shell
git clone https://github.com/zsh-users/zsh-autosuggestions ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-autosuggestions
# incr, wget可能无法下载，需要到对应的网页手动下载，不知道为啥
wget https://mimosa-pudica.net/src/incr-02.zsh   or (finde in Incremental  completion on zsh (mimosa-pudica.net))
mkdir ~/.oh-my-zsh/plugins/incr
mv incr-0.2.zsh ~/.oh-my-zsh/plugins/incr
```
## ~/.zshrc
将本项目下的`zshrc`覆盖到`~/.zshrc`
最后执行更新
`source ~/.zshrc`
## 配置 power10k
`p10k configure`

# 补充内容
## 如果编译时用的cmake
可以加上 `-DCMAKE_EXPORT_COMPILE_COMMANDS=ON`参数，也会生成相应的符号文件，将其拷贝到主目录，也很好用.
## waketime in github
https://wakatime.com/@artintel
## nvim
https://codingpackets.com/blog/neovim-install-and-configure/
### nvim python issue:
https://carakan.net/blog/2020/04/configuring-python3-on-neovim/

总结：可以把 vim 的配置直接过度到nvim里.

关键步骤：
1. `mkdir ~/.config/nvim`
2. 然后把 `~/.vim/` 路径下的文件全拷贝到这个路径下。
3. 然后把 `~/.vimrc` 拷贝到 `~/.config/nvim/init.vim`，
也许会执行 `:PlugUpgrade` 等操作
### neovide
https://neovide.dev/installation.html